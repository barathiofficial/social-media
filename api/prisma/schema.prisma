generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id    String  @id @default(uuid())
    email String  @unique @db.VarChar(255)
    name  String? @db.VarChar(255)

    otp       String?   @db.VarChar(6)
    otpExpiry DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    posts        Post[]
    postComments PostComment[]
    postLikes    PostLike[]

    @@map("users")
}

enum PostStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

model Post {
    id      String     @id @default(uuid())
    content String?    @db.Text
    status  PostStatus @default(DRAFT)

    userId String
    user   User   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    medias   PostMedia[]
    likes    PostLike[]
    comments PostComment[]

    @@map("posts")
}

model PostMedia {
    id  String @id @default(uuid())
    url String @db.VarChar(255)

    postId String
    post   Post   @relation(fields: [postId], references: [id])

    @@map("post_medias")
}

model PostLike {
    id String @id @default(uuid())

    userId String
    user   User   @relation(fields: [userId], references: [id])

    postId String
    post   Post   @relation(fields: [postId], references: [id])

    @@map("post_likes")
}

model PostComment {
    id      String      @id @default(uuid())
    content String?     @db.Text
    status  PostStatus? @default(DRAFT)

    userId String
    user   User   @relation(fields: [userId], references: [id])

    postId String
    post   Post   @relation(fields: [postId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("post_comments")
}
